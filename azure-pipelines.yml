###################################
# When to create a pipeline run
###################################
trigger:
  branches:
    include:
      - main
      - dev
      - QA
      - prod
      
  paths:
    exclude:
    - devops/*    
pr:
- master
- dev/*
- QA/*
- prod/*
- main/*

stages:  
  
  
  - stage: 'List_Files'
    displayName: 'Listing Files'
    jobs:
      - job: ListFiles
        displayName: 'Listing All Files'
        pool:
          vmImage: 'windows-latest'
        steps:
        - checkout: self  # Checkout the repository content

        - powershell: |
            # Define the directory path
            $directoryPath = "$(Build.SourcesDirectory)"

            # List all files in the directory
            Get-ChildItem -Path $directoryPath
          displayName: 'List Files in Directory'
      - job: Check_OS
        displayName: 'Checking Agent OS Architecture'
        pool:
          vmImage: 'windows-latest'
        steps:
        - powershell: |
            $osArchitecture = $env:Agent_OSArchitecture
            if ($osArchitecture -eq "X64") {
              Write-Host "Running on a 64-bit agent"
              # Add PowerShell steps specific to 64-bit agent here
            } else {
              Write-Host "Running on a 32-bit agent"
              # Add PowerShell steps specific to 32-bit agent here
            }
          displayName: 'Check Agent OS Architecture'

  - stage: 'Deploy_Database_Changes'
    displayName: 'Deploy Database Changes'
    jobs:
      - job: Deploy_Database
        displayName: 'Deploy Database'
        continueOnError: true
        pool:
          vmImage: "windows-latest"
        steps:
        - task: UseDotNet@2  # Use this task for Windows-based environments
          inputs:
            packageType: 'sdk'
            installationPath: $(Build.SourcesDirectory)/dotnet
            version: '5.x'
        
        - powershell: |
            # PowerShell script to print the version
            #Write-Host "PowerShell Version: $PSVersionTable.PSVersion"
            $PSVersionTable.PSVersion
            
          displayName: 'Print PowerShell Version'
        
        - powershell: |
            # Define the path to the zip archive
            $zipArchivePath = "$(Build.SourcesDirectory)/Toad.zip"
            # Define the destination path for extraction
            $destinationPath = "$(Build.SourcesDirectory)/Toad"
            # Set environment variables for Toad
            #Expand-Archive -Path "Toad.zip" -DestinationPath "$(Agent.ToolsDirectory)/Toad"
            # Unzip the folder
            Expand-Archive -Path $zipArchivePath -DestinationPath $destinationPath -Force
            # List all files within the extracted folder and its subdirectories
            Get-ChildItem -Path $destinationPath -File -Recurse | ForEach-Object {
            Write-Host "File: $($_.FullName)"
            }
            
            
            # Define the path to the zip archive
            $zipArchivePathScripts = "$(Build.SourcesDirectory)/Scripts.zip"
            # Define the destination path for extraction
            $destinationPathScripts = "$(Build.SourcesDirectory)/Scripts"
            # Unzip the folder
            Expand-Archive -Path $zipArchivePathScripts -DestinationPath $destinationPathScripts -Force
            
            # List all files within the extracted folder and its subdirectories
            Get-ChildItem -Path $destinationPathScripts -File -Recurse | ForEach-Object {
            Write-Host "File: $($_.FullName)"
            }
            
            
            $directoryPath = "$(Build.SourcesDirectory)"
            Get-ChildItem -Path $directoryPath
          displayName: 'Unzipping Folders and Listing all Files'  
            
        - powershell: |
            # Use $(Build.SourcesDirectory)
            Write-Host "Build Sources Directory: $(Build.SourcesDirectory)"

            # Use $(System.DefaultWorkingDirectory)
            Write-Host "System Default Working Directory: $(System.DefaultWorkingDirectory)"
            
          displayName: 'Print Directories'
        - powershell: |
            $env:TOAD_HOME = "$(Build.SourcesDirectory)/Toad\Toad"
            $env:PATH = "$env:PATH;$env:TOAD_HOME"
            # Define Toad deployment command
            
            
            # Define the path to the Toad executable
            $toadExecutable = "$(Build.SourcesDirectory)/Toad\Toad\tdt.exe"
            $toadCommand = "$(Build.SourcesDirectory)/Toad\Toad\tdt.exe"
          displayName: 'Setting Up Environment'
          
        - powershell: |
            # Define the path to the Toad executable
            $toadCommand = "$(Build.SourcesDirectory)/Toad\Toad\tdt.exe"
            $toadDirectory = "$(Build.SourcesDirectory)/Toad\Toad"
            
            # Define the path to the Toad project file within the repository
            #$projectPath = "$(System.DefaultWorkingDirectory)/path/to/your/project"
        
            # Set the folder path containing your PowerShell scripts
            $scriptsFolderPath = "$(Build.SourcesDirectory)\Scripts\Scripts"
            
            # Specify the log directory
            $logDirectory = "$(Build.SourcesDirectory)\ToadLogs"
            # Create the log directory if it doesn't exist
            if (-not (Test-Path -Path $logDirectory -PathType Container)) {
              New-Item -Path $logDirectory -ItemType Directory
            }
            
            # Get all .ps1 files in the folder
            $scriptFiles = Get-ChildItem -Path $scriptsFolderPath -Filter *.ps1
            # Loop through each script and execute using the Toad DevOps Toolkit
            
            # Loop through each script and execute it using Toad
            foreach ($scriptFile in $scriptFiles) {
              $scriptPath = Join-Path -Path $toadDirectory -ChildPath $scriptFile
              $logFilePath = Join-Path -Path $logDirectory -ChildPath "$($scriptFile.BaseName)_Log.txt"
              Write-Host "Executing Toad script: $($scriptFile.Name)"
              #Start-Process -FilePath .\tdt.exe -ArgumentList "-batch", "-runscript=$scriptPath" -Wait
              Invoke-Expression -Command "& '$toadDirectory\tdt.exe' -batch -runscript=`"$scriptPath`"" -debug 2>&1 | Out-File -FilePath $logFilePath -Append
            }
            
            #$connectionString = "YourConnectionString"
            #$deployCommand = "$toadCommand /execute:$projectPath /server:$connectionString"
            # Execute the deployment command
            #Invoke-Expression $deployCommand
          displayName: 'Run Toad DevOps PowerShell Scripts'
          
        - task: PublishBuildArtifacts@1
          displayName: 'Publishing Log File'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)\ToadLogs'
            ArtifactName: 'ToadLogs'
            publishLocation: 'Container'
            
        - task: PowerShellOnTargetMachines@3
          inputs:
            Machines: '175.110.174.139'
            UserName: 'shosh'
            UserPassword: 'Shaimaa1f'
            ScriptType: 'FilePath'
            scriptPath: '$(Build.SourcesDirectory)\ExecuteAllScripts.ps1'
            arguments: '-ExecutionPolicy Bypass'            
          displayName: 'Execute All PowerShell Scripts on Target Machines'  